import 'package:bloc/bloc.dart';
import 'package:dio/dio.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:hexcolor/hexcolor.dart';
import 'package:v_care_clinic/screens/home_screen/model/specialization_model.dart';
import 'package:v_care_clinic/screens/home_screen/view_model/cubit/states.dart';
import 'package:v_care_clinic/screens/register_screen/view_model/cubit/states.dart';

import '../../../../core/cache_helper.dart';
import '../../../../core/dio_helper.dart';

import '../../model/city_about_government.dart';
import '../../model/city_model.dart';
import '../../model/get_all_doctors.dart';
import '../../model/government_model.dart';
import '../../model/home_model.dart';
import '../../view/widget/home_screen_body.dart';



class HomeCubit extends Cubit<HomeStates> {
  HomeCubit() : super(HomeInitialState());
  static HomeCubit get(context) => BlocProvider.of<HomeCubit>(context);

  final Dio dio = Dio();
  Future userLogOut()async
  {
    try {
      Response response=await DioHelper.postData(url: 'auth/logout',token: CacheHelper.getData(key: "token"), data: {});
      print(response.data['message']);
      emit(LogOutSuccess());
    } on Exception catch (e) {
      print(e.toString());
      if(e is DioError && e.response?.statusCode==401){
        final error = e.response?.data;
        final m = error["message"];
        print(error);
        print(m);
      }
      emit(LogOutFailure());

    }
  }
  CityAboutGovernmentModel? cityAboutGovernmentModel;
  Future<void>getAllCityAboutGovernment(int index)async
  {
    emit(CityAboutGovernmentLoadingState());


    try {
      Response data = await DioHelper.getData(
          url: 'city/show/$index',
          token: CacheHelper.getData(key: "token"));
      if (data.statusCode == 200) {
        cityAboutGovernmentModel = CityAboutGovernmentModel.fromJson(data.data);
      }


      emit(CityAboutGovernmentSuccessState());
    } on Exception catch (e) {
      if (e is DioError && e.response?.statusCode == 401) {
        final error = e.response?.data;
        final m = error["message"];
        print(error);
        print(m);
      }
      emit(SpecializationErrorState());
      print(e.toString());
    }
  }
  GetALLDoctors ? getALLDoctors;
  Future<void>getAllDoctors()async
  {

    CircularProgressIndicator(
      color: HexColor('#174068'), // Custom color for CircularProgressIndicator
    );
    emit(GetAllDoctorsLoadingState());



    try {
      Response data = await DioHelper.getData(
          url: 'doctor/index',
          token: CacheHelper.getData(key: "token"));
      if (data.statusCode == 200) {
        getALLDoctors = GetALLDoctors.fromJson(data.data);
      }


      emit(GetAllDoctorsSuccessState());
    } on Exception catch (e) {
      if (e is DioError && e.response?.statusCode == 401) {
        final error = e.response?.data;
        final m = error["message"];
        print(error);
        print(m);
      }
      emit(GetAllDoctorsErrorState());
      print(e.toString());
    }
  }
  int? selectItem;

  void selectOption(int option) {
    selectItem = option;
    emit(RadioCubitSelectedadd());
  }
  Autogenerated? autogenerated;
  Future<void>getAllDoctorSpec()async
  {
    emit(HomeLoadingState());


    try {
      Response  data=await  DioHelper.getData(
          url: 'specialization/index',
          token: CacheHelper.getData(key: "token"));
      if(data.statusCode==200){

        autogenerated=Autogenerated.fromJson(data.data);
      }


      emit(HomeSuccessState());
    } on Exception catch (e)
    {
      if(e is DioError && e.response?.statusCode==401){
        final error = e.response?.data;
        final m = error["message"];
        print(error);
        print(m);
      }
      emit(HomeErrorState());
      print(e.toString());

    }


  }
  CityModel? cityModel;
  Future<void>getAllCity()async
  {
    emit(CityLoadingState());


    try {
      Response  data=await  DioHelper.getData(
          url: 'city/index',
          token: CacheHelper.getData(key: "token"));
      if(data.statusCode==200){

        cityModel =CityModel.fromJson(data.data);
      }


      emit(CitySuccessState());
    } on Exception catch (e)
    {
      if(e is DioError && e.response?.statusCode==401){
        final error = e.response?.data;
        final m = error["message"];
        print(error);
        print(m);
      }
      emit( CityErrorState());
      print(e.toString());

    }


  }
  GovernmentModel?governmentModel;

  Future<void>getAllGovernment()async
  {
    emit(GovernmentLoadingState ());


    try {
      Response  data=await  DioHelper.getData(
          url: 'governrate/index',
          token: CacheHelper.getData(key: "token"));
      if(data.statusCode==200){

        governmentModel =GovernmentModel.fromJson(data.data);
      }


      emit(GovernmentSuccessState());
    } on Exception catch (e)
    {
      if(e is DioError && e.response?.statusCode==401){
        final error = e.response?.data;
        final m = error["message"];
        print(error);
        print(m);
      }
      emit(GovernmentErrorState());
      print(e.toString());

    }


  }

 SpecialModel?specialModel;

  Future<void>getAllSpecializatio()async
  {
    emit(SpecializationLoadingState());


    try {
      Response  data=await  DioHelper.getData(
          url: 'specialization/index',
          token: CacheHelper.getData(key: "token"));
      if(data.statusCode==200){

        specialModel =SpecialModel.fromJson(data.data);
      }


      emit(SpecializationSuccessState());
    } on Exception catch (e)
    {
      if(e is DioError && e.response?.statusCode==401){
        final error = e.response?.data;
        final m = error["message"];
        print(error);
        print(m);
      }
      emit(SpecializationErrorState());
      print(e.toString());

    }


  }


}
